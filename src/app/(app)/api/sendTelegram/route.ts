import { NextResponse } from "next/server";

const TELEGRAM_API = `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`;

export async function POST(req: Request) {
  const { formData } = await req.json();

  try {
    // Using HTML formatting instead of Markdown to avoid parsing issues
    const message = `
<b>–ù–æ–≤–µ –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ê–Ω–∫–µ—Ç–∏</b>
======================
üë§ <b>–Ü–º'—è</b>: ${formData["your-name"]}

üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω</b>: ${formData.phone}

üè¢ <b>–¢–∏–ø –ù–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ</b>: ${formData.building_type}

üìù <b>–î–∏–∑–∞–π–Ω</b>: ${formData.design}
üîç <b>–î–µ—Ç–∞–ª—ñ –î–∏–∑–∞–π–Ω—É</b>: ${Array.isArray(formData.design_detail) ? formData.design_detail.join(", ") : formData.design_detail || "–ù–µ –æ–±—Ä–∞–Ω–æ"}

üè† <b>–í—ñ–∫ –ë—É–¥—ñ–≤–ª—ñ</b>: ${formData.age}
üîÑ <b>–ü–µ—Ä–µ–ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è</b>: ${formData.planning}
üîß <b>–ö–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó</b>: ${formData.constructions}
üõèÔ∏è <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –°–ø–∞–ª–µ–Ω—å</b>: ${formData.bedroom}

üé® <b>–ë–∞–∂–∞–Ω–∏–π –°—Ç–∏–ª—å</b>: ${Array.isArray(formData.style) ? formData.style.join(", ") : formData.style || "–ù–µ –æ–±—Ä–∞–Ω–æ"}

ü™µ <b>–£–ø–æ–¥–æ–±–∞–Ω–Ω—è –ø–æ –ü—ñ–¥–ª–æ–∑—ñ</b>: ${Array.isArray(formData.floor) ? formData.floor.join(", ") : formData.floor || "–ù–µ –æ–±—Ä–∞–Ω–æ"}
üîß <b>–Ü–Ω—à–µ –ø–æ –ü—ñ–¥–ª–æ–∑—ñ</b>: ${formData["floor-other"] || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}

üß± <b>–£–ø–æ–¥–æ–±–∞–Ω–Ω—è –ø–æ –°—Ç—ñ–Ω–∞—Ö</b>: ${Array.isArray(formData.wall) ? formData.wall.join(", ") : formData.wall || "–ù–µ –æ–±—Ä–∞–Ω–æ"}
üîß <b>–Ü–Ω—à–µ –ø–æ –°—Ç—ñ–Ω–∞—Ö</b>: ${formData["wall-other"] || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}

üè† <b>–£–ø–æ–¥–æ–±–∞–Ω–Ω—è –ø–æ –°—Ç–µ–ª—ñ</b>: ${Array.isArray(formData.roof) ? formData.roof.join(", ") : formData.roof || "–ù–µ –æ–±—Ä–∞–Ω–æ"}

üöø <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –°–∞–Ω–≤—É–∑–ª—ñ–≤</b>: ${formData.bathroom}
üõÅ <b>–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏ –°–∞–Ω–≤—É–∑–ª–∞</b>: ${formData.bathroommat}

üö™ <b>–¢–∏–ø –î–≤–µ—Ä–µ–π</b>: ${formData.door}

üåü <b>–ù–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–µ –≤ –Ü–Ω—Ç–µ—Ä'—î—Ä—ñ</b>: ${Array.isArray(formData.main) ? formData.main.join(", ") : formData.main || "–ù–µ –æ–±—Ä–∞–Ω–æ"}
üîß <b>–Ü–Ω—à–µ, —â–æ –≤–∞–∂–ª–∏–≤–æ</b>: ${formData["main-other"] || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}

üí° <b>–£–ø–æ–¥–æ–±–∞–Ω–Ω—è –ø–æ –û—Å–≤—ñ—Ç–ª–µ–Ω–Ω—é</b>: ${formData.lighting}

‚è∞ <b>–ó—Ä—É—á–Ω–∏–π –ß–∞—Å –¥–ª—è –ó–≤'—è–∑–∫—É</b>: ${formData.time}
`;

    const response = await fetch(TELEGRAM_API, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: process.env.TELEGRAM_USER_ID,
        text: message,
        parse_mode: "HTML",
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("Telegram API error:", errorText);
      throw new Error(
        `Failed to send message to Telegram: ${response.status} ${errorText}`,
      );
    }

    return NextResponse.json({
      message: "Message sent to Telegram successfully!",
    });
  } catch (error) {
    console.error("Error sending message to Telegram: ", error);
    return NextResponse.json(
      { error: "Error sending message to Telegram" },
      { status: 500 },
    );
  }
}
